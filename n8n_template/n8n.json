{
  "name": "Circleback -> n8n",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "circleback",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -100,
        0
      ],
      "id": "f8e4dc9c-0cfc-49dc-a9b2-57871e2b257d",
      "name": "Webhook",
      "webhookId": "YOUR_WEBHOOK_ID"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=YOUR_SUPABASE_URL/rest/v1/transcripts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "YOUR_SUPABASE_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "organization",
              "value": "={{ $('Code').item.json.organization }}"
            },
            {
              "name": "transcripts",
              "value": "={{ $('Code').item.json.transcripts }}"
            },
            {
              "name": "id",
              "value": "={{ $('Code').item.json.id }}"
            },
            {
              "name": "POC",
              "value": "={{ $('Code').item.json.POC }}"
            },
            {
              "name": "company",
              "value": "={{ $('Code').item.json.company }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        0
      ],
      "id": "99da7d9f-2670-4972-9b26-1663116a3678",
      "name": "Upload to Supabase"
    },
    {
      "parameters": {
        "jsCode": "// Get the Circleback payload\nconst payload = $('Webhook').first().json.body;\nconst segments = payload.transcript || [];\n\n// 1) Stringify the transcript segments\nconst transcriptsStr = JSON.stringify(\n  segments.map(s => ({\n    speaker: s.speaker,\n    text: s.text,\n    timestamp: s.timestamp,\n  }))\n);\n\n// 2) Find team member (POC)\nconst teamAttendee = (payload.attendees || []).find(a =>\n  a.email && a.email.endsWith('YOUR_EMAIL_DOMAIN')\n);\nconst POC = teamAttendee?.name || '';\n\n// 3) Filter out bots and internal attendees\nconst isValidGuest = (email) => {\n  return (\n    email &&\n    !email.endsWith('YOUR_EMAIL_DOMAIN') &&\n    !email.endsWith('@circleback.ai') &&\n    !email.match(/@.*\\.calendar\\.google\\.com$/)\n  );\n};\n\n// 4) Find the first valid guest\nconst guest = (payload.attendees || []).find(a => isValidGuest(a.email));\n\n// 5) Extract company domain\nconst company = guest?.email?.split('@')[1] || 'unknown';\n\n// 6) Emit result for Supabase\nreturn [{\n  json: {\n    organization: '',\n    company,\n    transcripts: transcriptsStr,\n    id: payload.id,\n    POC,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        0
      ],
      "id": "784e862a-1a55-49b0-b221-7d6ac581742e",
      "name": "Code"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Upload to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "YOUR_VERSION_ID",
  "meta": {
    "instanceId": "YOUR_INSTANCE_ID"
  },
  "id": "YOUR_WORKFLOW_ID",
  "tags": []
} 